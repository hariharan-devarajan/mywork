/* Gaussian elimination without pivoting.
 * Compile with "gcc gauss.c"
 */

/* ****** ADD YOUR CODE AT THE END OF THIS FILE. ******
 * You need not submit the provided code.
 */

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <math.h>
#include <sys/types.h>
#include <sys/times.h>
#include <sys/time.h>
#include <time.h>
#include <mpi.h>
#include <execinfo.h>
#include <signal.h>
#include <fstream>
#include <string.h>
/* Program Parameters */
#define MAXN 1000  /* Max value of N */
  /* Matrix size */
/* Matrices and vectors */

/* A * X = B, solve for X */
typedef struct data{
    float A[MAXN][MAXN];
    float B[MAXN];
}d;
int N;
float X[MAXN];
d datatInputs;
char* fileName;

/* Prototype */
d forwardElemination(int rank,int worldSize);
void backwardSubstitution();
d mergeData(d source,d destination,int rank,int worldSize);
/* The function you will provide.
* It is this routine that is timed.
* It is called only on the parent.
*/

/* returns a seed for srand based on the time */
unsigned int time_seed() {
  struct timeval t;
  struct timezone tzdummy;

  gettimeofday(&t, &tzdummy);
  return (unsigned int)(t.tv_usec);
}

/* Set the program parameters from the command-line arguments */
void parameters(int argc, char **argv) {
  int seed = 0;  /* Random seed */
  char uid[32]; /*User name */

  /* Read command-line arguments */
  srand(time_seed());  /* Randomize */

  if (argc == 3) {
    seed = atoi(argv[2]);
    srand(seed);
    printf("Random seed = %i\n", seed);
    fileName=argv[3];
    printf("FileName = %s\n", fileName);
  }
  if (argc >= 2) {
    N = atoi(argv[1]);
    if (N < 1 || N > MAXN) {
      printf("N = %i is out of range.\n", N);
      exit(0);
    }
  }
  else {
    printf("Usage: %s <matrix_dimension> [random seed]\n",
           argv[0]);
    exit(0);
  }

  /* Print parameters */
  printf("\nMatrix dimension N = %i.\n", N);
}

/* Initialize A and B (and X to 0.0s) */
d initialize_inputs() {
  int row, col;

  printf("\nInitializing...\n");
  for (col = 0; col < N; col++) {
    for (row = 0; row < N; row++) {
      datatInputs.A[row][col] = (float)rand() / 32768.0;
    }
    datatInputs.B[col] = (float)rand() / 32768.0;
    X[col] = 0.0;
  }
  return datatInputs;

}
/* Print input matrices */
void print_inputs() {
  int row, col;

    printf("\nN =%d\n\t",N);
  if (N < 10) {

    printf("\nA =\n\t");
    for (row = 0; row < N; row++) {
      for (col = 0; col < N; col++) {
	printf("%5.2f%s", datatInputs.A[row][col], (col < N-1) ? ", " : ";\n\t");
      }
    }
    printf("\nB = [");
    for (col = 0; col < N; col++) {
      printf("%5.2f%s", datatInputs.B[col], (col < N-1) ? "; " : "]\n");
    }
  }
}
void handler(int sig) {
  void *array[10];
  size_t size;

  // get void*'s for all entries on the stack
  size = backtrace(array, 10);

  // print out all the frames to stderr
  fprintf(stderr, "Error: signal %d:\n", sig);
  backtrace_symbols_fd(array, size, STDERR_FILENO);
  exit(1);
}
void print_X() {
  int row;

  if (N < 100) {
    printf("\nX = [");
    for (row = 0; row < N; row++) {
      printf("%5.2f%s", X[row], (row < N-1) ? "; " : "]\n");
    }
  }
}
int main(int argc, char **argv) {
	parameters(argc, argv);
	freopen (argv[3],"w",stdout);
    printf("Parallel MPI");
    signal(SIGSEGV, handler);
    /* Timing variables */
    const int tagForSendMainData = 13;
    MPI_Init(&argc,&argv);
    struct timeval etstart, etstop;  /* Elapsed times using gettimeofday() */
    struct timezone tzdummy;
    clock_t etstart2, etstop2;  /* Elapsed times using times() */
    unsigned long long usecstart, usecstop;
    struct tms cputstart, cputstop;  /* CPU times for my processes */
    int worldRank;
    MPI_Comm_rank(MPI_COMM_WORLD,&worldRank);
    int worldSize;
    MPI_Comm_size(MPI_COMM_WORLD,&worldSize);



    if(worldRank==0){
        printf("\nEntered root processor\n");
        /* Process program parameters */
        printf("\nRank : %d\n",worldRank);
        printf("\nSize : %d\n",worldSize);


        /* Initialize A and B */

        datatInputs=initialize_inputs();

        /* Print input matrices */
        print_inputs();
        /* Start Clock */

        printf("\nStarting clock.\n");
        gettimeofday(&etstart, &tzdummy);
        etstart2 = times(&cputstart);
        printf("\nGet Data from all other processors for merging\n");
    }

    printf("\nBroadcast data to all processors\n");

    datatInputs=forwardElemination(worldRank,worldSize);

    if(worldRank==0){
        printf("\nPerform Back Substitution\n");
        backwardSubstitution();
        print_inputs();
        /* Stop Clock */
        gettimeofday(&etstop, &tzdummy);
        etstop2 = times(&cputstop);

        printf("Stopped clock.\n");
        usecstart = (unsigned long long)etstart.tv_sec * 1000000 + etstart.tv_usec;
        usecstop = (unsigned long long)etstop.tv_sec * 1000000 + etstop.tv_usec;

        /* Display output */
        print_X();
        /* Display timing results */

          printf("\nElapsed time = %g ms.\n",
             (float)(usecstop - usecstart)/(float)1000);

          printf("(CPU times are accurate to the nearest %g ms)\n",
             1.0/(float)CLOCKS_PER_SEC * 1000.0);
          printf("My total CPU time for parent = %g ms.\n",
             (float)( (cputstop.tms_utime + cputstop.tms_stime) -
                  (cputstart.tms_utime + cputstart.tms_stime) ) /
             (float)CLOCKS_PER_SEC * 1000);
          printf("My system CPU time for parent = %g ms.\n",
             (float)(cputstop.tms_stime - cputstart.tms_stime) /
             (float)CLOCKS_PER_SEC * 1000);
          printf("My total CPU time for child processes = %g ms.\n",
             (float)( (cputstop.tms_cutime + cputstop.tms_cstime) -
                  (cputstart.tms_cutime + cputstart.tms_cstime) ) /
             (float)CLOCKS_PER_SEC * 1000);
              /* Contrary to the man pages, this appears not to include the parent */
          printf("--------------------------------------------\n");
  }
  MPI_Finalize();
fclose (stdout);

  exit(0);
}
void MergeArray(int *in, int *inout, int *len, MPI_Datatype *datatype)
{
    for (int i = 0; i < *len; i++)
    {
        *inout = *in;
        in++;
        inout++;
    }
}

/* ------------------ Above Was Provided --------------------- */

/****** You will replace this routine with your own parallel version *******/
/* Provided global variables are MAXN, N, A[][], B[], and X[],
 * defined in the beginning of this code.  X[] is initialized to zeros.
 */
d forwardElemination(int worldRank,int worldSize) {
    int norm, row, col,n=3;  /* Normalization row, and zeroing
			* element row and col */
    float multiplier;
    int root=0;
    printf("Computing Serially.\n");
    MPI_Op myOp;
    MPI_Op_create((MPI_User_function*)MergeArray, true, &myOp);
  /* Gaussian elimination */
    for (norm = 0; norm < N-1; norm++) {

        MPI_Bcast(&(datatInputs.A[0][0]),N*N,MPI_FLOAT,0,MPI_COMM_WORLD);
        MPI_Bcast(&datatInputs.B[0],N,MPI_FLOAT,0,MPI_COMM_WORLD);
        for(int i= norm+1+worldRank%worldSize; i<N; i++)
        {
            multiplier=datatInputs.A[i][norm]/datatInputs.A[norm][norm];
            for(int j=norm;j<N;j++){
                datatInputs.A[i][j]-=datatInputs.A[norm][norm]*multiplier;

            }
            datatInputs.B[i]-=datatInputs.A[norm][norm]*multiplier;
            //Reduce the data to root
        }

    }
    return datatInputs;
}
/* (Diagonal elements are not normalized to 1.  This is treated in back
   * substitution.)
   */
void backwardSubstitution(){
int norm, row, col;
/* Back substitution */
  for (row = N - 1; row >= 0; row--) {
    X[row] = datatInputs.B[row];
    for (col = N-1; col > row; col--) {
      X[row] -= datatInputs.A[row][col] * X[col];
    }
    X[row] /= datatInputs.A[row][row];
  }
}
